# -*- Makefile -*-

include $(LEVEL)/Makefile.config

# Include LLVM's Master Makefile config and rules.
include $(LLVM_OBJ_ROOT)/Makefile.config

ifeq ($(BYTECODE_LIBRARY), 1)
#
# Override make variables based on the runtime configuration. We want
# to override whatever the user may have said on the command line,
# hence the use of override.
#

override ENABLE_OPTIMIZED := $(RUNTIME_ENABLE_OPTIMIZED)
override DISABLE_ASSERTIONS := $(RUNTIME_DISABLE_ASSERTIONS)
override ENABLE_PROFILING := $(RUNTIME_ENABLE_PROFILING)
override ENABLE_COVERAGE := $(RUNTIME_ENABLE_COVERAGE)
endif

# Required for Boost 
LIBS += -lboost_signals -lboost_serialization

include $(LLVM_SRC_ROOT)/Makefile.rules

# LLVMCC was added in 2.7.
ifeq ($(LLVMCC),)
LLVMCC := $(LLVMGCC)
LLVMCXX := $(LLVMGXX)
endif

# Needed to build runtime library using clang (gnu89 is the gcc default)
C.Flags += -std=gnu89

ifeq ($(ENABLE_EXT_STP),1)
  LD.Flags += -L$(STP_ROOT)/lib
  CXX.Flags += -I$(STP_ROOT)/include
else
  LD.Flags += -L$(PROJ_SRC_ROOT)/stp/lib
  CXX.Flags += -I$(PROJ_SRC_ROOT)/stp/include
endif
CXX.Flags += -DKLEE_DIR=\"$(PROJ_OBJ_ROOT)\"

# For STP.
CXX.Flags += -DEXT_HASH_MAP

# Required for Boost 
REQUIRES_RTTI=1
CXX.Flags += -Wno-deprecated

ifneq ($(DISABLE_GOOGLE_PROFILING),1)
  # Default is to compile with google profiler, no performance 
  # hit unless enabled via commandline or environment var
  CPP.Defines += -DGOOGLE_PROFILER 
endif

ifneq ($(DISABLE_TCMALLOC),1)
  # Default is to compile with tcmalloc 
  CXX.Flags += -fno-builtin-malloc -fno-builtin-calloc -fno-builtin-realloc -fno-builtin-free
  LIBS += -ltcmalloc
endif

